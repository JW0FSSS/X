// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String   @db.VarChar(255)
  content   String?
  published Boolean  @default(false)
  user    User     @relation(fields: [userId], references: [id])
  userId  Int
  comments Comment[]
  likes Like_Post[]
}

model User {
  id      Int      @id @default(autoincrement())
  email   String   @unique
  name    String?
  image   String?
  username String? @unique
  password String  @db.VarChar(255)
  posts   Post[]
  comments Comment[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  following  Follow[] @relation("Followers")
  followers  Follow[] @relation("Following")
  likes_post Like_Post[]
  likes_comment Like_Comment[]
}

model Follow{
  id           Int      @id @default(autoincrement())
  following    User     @relation("Following", fields: [followingId], references: [id])
  follower     User     @relation("Followers", fields: [followerId], references: [id])
  followerId    Int     
  followingId  Int      
}

model Like_Post{
  id           Int      @id @default(autoincrement())
  userId    Int 
  user    User     @relation(fields: [userId], references: [id])
  postId    Int 
  post    Post     @relation(fields: [postId], references: [id])
}

model Like_Comment{
  id           Int      @id @default(autoincrement())
  userId    Int 
  user    User     @relation(fields: [userId], references: [id])
  comment    Comment     @relation(fields: [commentId], references: [id])
  commentId    Int 
}

model Comment{
  id      Int      @id @default(autoincrement())
  content String 
  likes   Like_Comment[]
  user    User     @relation(fields: [userId], references: [id])
  post    Post     @relation(fields: [postId], references: [id])
  postId  Int
  userId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}